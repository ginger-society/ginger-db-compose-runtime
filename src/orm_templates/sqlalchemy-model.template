from __future__ import annotations

from db.meta import Model
from sqlalchemy import String, Boolean, ForeignKey, Column, Table, Enum, Integer, Date, DateTime
from sqlalchemy.orm import Mapped, mapped_column, relationship
from typing import Optional
import enum
from pydantic import BaseModel
import datetime

{% for table in relation_tables %}
{{table.name | title}} = Table(
    "{{table.table}}",
    Model.metadata,
    Column("{{table.self_id}}", ForeignKey("{{table.self_id_path}}"), primary_key=True),
    Column("{{table.other_id}}", ForeignKey("{{table.other_id_path}}"), primary_key=True),
)
{% endfor %}

{% for enum in enums %}

class {{enum.name}}(enum.Enum):

    {% for choice in enum.choices %}{% if not enum.trsnaform_enum %}{{choice.0}} = "{{choice.1}}"{% endif %}
    {% if enum.trsnaform_enum %}_{{choice.0}} = "{{choice.1}}"{% endif %}{% endfor %}

{% endfor %}

{% for key, value in schemas.items %}
class {{key | title}}(Model):
    __tablename__ = "{{value.table_name}}"{% for fieldname, fieldconfig in  value.fields.items %}
    {{fieldname}}: Mapped[{{fieldconfig.pydenticType | safe }}] = {{fieldconfig.decoratorType}}({% if not fieldconfig.no_type %}{{fieldconfig.type}}{% if fieldconfig.typeInputs %}({% for typeinput in fieldconfig.typeInputs %}{{typeinput | safe}}{% endfor %}){% endif %}{% endif %}{% if not fieldconfig.no_type and fieldconfig.decorators %},{% endif %}{% for decorator in fieldconfig.decorators %}{{decorator |safe}}{% if not forloop.last %},{% endif %}{% endfor %}){% endfor %}

{% endfor %}


{% for key, value in schemas.items %}
class {{key | title}}T(BaseModel):
    {% for fieldname, fieldconfig in  value.fields.items %}
    {{fieldname}}: {% if fieldconfig.null %}Optional[{{fieldconfig.pydentic_class_type | safe}}]{%  else %}{{fieldconfig.pydentic_class_type | safe}}{% endif %}{% endfor %}
    class Config:
        orm_mode = True
{% endfor %}



{% for key, value in schemas.items %}
class {{key | title}}InsertableT(BaseModel):
    {% for fieldname, fieldconfig in  value.fields.items %}
    {% if fieldname != 'id' %}{{fieldname}}: {% if fieldconfig.null %}Optional[{{fieldconfig.pydentic_class_type | safe}}]{%  else %}{{fieldconfig.pydentic_class_type | safe}}{% endif %}{% endif %}{% endfor %}
    class Config:
        orm_mode = True

class {{key | title}}UpdatableT(BaseModel):
    {% for fieldname, fieldconfig in  value.fields.items %}
    {% if fieldname != 'id' %}{{fieldname}}: Optional[{{fieldconfig.pydentic_class_type | safe}}]{% endif %}{% endfor %}
    class Config:
        orm_mode = True
{% endfor %}

{% for key, value in schemas.items %}
{{key | title}}T.update_forward_refs()
{{key | title}}UpdatableT.update_forward_refs()
{{key | title}}InsertableT.update_forward_refs()
{% endfor %}

